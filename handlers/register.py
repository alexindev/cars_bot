import os

from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from keyboard.standart import get_cities_kb, select_career_kb, send_phone_kb, register_kb, next_or_back, cancel_reg_kb
from loader import bot, base, data
from states.user import User
from utils.helpers import registry_preparation_text
from utils.text_answer import start_command_text


async def register_user(message: types.Message, state: FSMContext):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ """
    await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å:', reply_markup=select_career_kb)
    await state.set_state(User.start_quiz)


async def select_city(message: types.Message, state: FSMContext):
    """ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ """
    cities = base.get_parks()
    await state.update_data(career=message.text, user=message.from_user.id)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=get_cities_kb(cities))
    await state.set_state(User.get_city)


async def get_phone(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ """
    await state.update_data(city=message.text)
    await bot.send_message(message.from_user.id, '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏–Ω–µ –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"',
                           reply_markup=send_phone_kb)
    await state.set_state(User.get_phone)


async def process_register(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ """
    phone = message.contact.phone_number
    if not phone.startswith('+'):
        phone = '+' + phone
    user_data = await state.get_data()
    await state.update_data(phone=phone)
    await bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...',
                           reply_markup=ReplyKeyboardRemove())
    park_data = base.get_parks()
    for park in park_data:
        park_id = park.get('park_id')
        client = park.get('client')
        api_key = park.get('api_key')
        driver = await data.get_driver_list(phone=phone, api_key=api_key, park_id=park_id, client=client)
        if driver:
            await bot.send_message(message.from_user.id,
                                   f'–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥–æ—Ä–æ–¥–µ {park.get("name")}.\n'
                                   f'–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üëâüèª /start',
                                   reply_markup=cancel_reg_kb
                                   )
            await state.clear()
            return
    else:
        await bot.send_message(chat_id=os.getenv('CHANEL_ID'),
                               text=(f'‚è≥ –ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n'
                                     f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data.get("career")}\n'
                                     f'–ì–æ—Ä–æ–¥: {user_data.get("city")}\n')
                               )
        text = registry_preparation_text(await state.get_data())
        await bot.send_message(message.from_user.id, text, reply_markup=next_or_back)
        await state.set_state(User.next_step)


async def get_name(message: types.Message, state: FSMContext):
    """ –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–Ω–∏–µ —Ñ–æ—Ä–º—ã. –ü–æ–ª—É—á–∏—Ç—å –§–ò–û"""
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.\n–ü—Ä–∏–º–µ—Ä: –í–æ–ª–∫–æ–≤ –û–ª–µ–≥ –ï–≤–≥–µ–Ω—å–µ–≤–∏—á',
                           reply_markup=cancel_reg_kb)
    await state.set_state(User.get_car_info)


async def get_car_info_and_reg_courier(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –∏/–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ """
    user_answer = message.text.split(' ')
    if len(user_answer) == 3:
        user_data = await state.get_data()
        if user_data.get('career') == 'üö∂ –ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä':
            phone = user_data.get('phone')
            career = user_data.get('career')
            city = user_data.get('city')

            text = (f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n'
                    f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {career}\n'
                    f'–ü–æ–ª–Ω–æ–µ –∏–º—è: {message.text}\n'
                    f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n'
                    f'–ì–æ—Ä–æ–¥: {city}\n')
            if message.from_user.username:
                text += f'–ü—Ä–æ—Ñ–∏–ª—å: @{message.from_user.username}'

            await bot.send_message(chat_id=os.getenv('CHANEL_ID'), text=text)

            await bot.send_message(message.from_user.id,
                                   text='‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\nüë©‚Äçüíª –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É...',
                                   reply_markup=cancel_reg_kb)
            await state.clear()
            return

        await state.update_data(name=message.text)
        await bot.send_message(message.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:\n'
                                    '–ì–æ—Å –Ω–æ–º–µ—Ä\n'
                                    '–ú–∞—Ä–∫–∞\n'
                                    '–ú–æ–¥–µ–ª—å\n'
                                    '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n'
                                    '–¶–≤–µ—Ç\n\n'
                                    '<i>–ü—Ä–∏–º–µ—Ä: E023EE123, Ford, Mustang, 2020, –ñ–µ–ª—Ç—ã–π</i>',
                               reply_markup=cancel_reg_kb)
        await state.set_state(User.get_doc_info)
    else:
        await bot.send_message(message.from_user.id,
                               '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n –ü—Ä–∏–º–µ—Ä: –í–æ–ª–∫–æ–≤ –û–ª–µ–≥ –ï–≤–≥–µ–Ω—å–µ–≤–∏—á',
                               reply_markup=cancel_reg_kb)


async def get_doc_info(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö """
    if message.content_type == 'text':
        await state.update_data(car_info=message.text)
        await bot.send_message(message.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä)\n\n'
                                    '<i>–ü—Ä–∏–º–µ—Ä: 99–£–í188410</i>',
                               reply_markup=cancel_reg_kb)
        await state.set_state(User.get_license)
    else:
        await bot.send_message(message.from_user.id,
                               '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ',
                               reply_markup=cancel_reg_kb)


async def get_license(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–∏ """
    if message.content_type == 'text':
        await state.update_data(sts=message.text)
        await bot.send_message(message.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–∏ (—Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä)\n\n'
                                    '<i>–ü—Ä–∏–º–µ—Ä: 3130635571</i>',
                               reply_markup=cancel_reg_kb)
        await state.set_state(User.get_driver_info)
    else:
        await bot.send_message(message.from_user.id,
                               '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                               reply_markup=cancel_reg_kb)


async def get_driver_info(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ –≤–æ–¥–∏—Ç–µ–ª—è """
    if message.content_type == 'text':
        await state.update_data(license=message.text)
        await bot.send_message(message.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –≤—ã–¥–∞—á–∏, –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–µ—Ä–µ–Ω–∏—è –∏ –æ '
                                    '—Å—Ä–æ–∫–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ç–∞–∂–∞)\n\n'
                                    '<i>–ü—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏: 15.06.2015, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 16.06.2025, —Å—Ç–∞–∂ 8 –ª–µ—Ç</i>',
                               reply_markup=cancel_reg_kb)
        await state.set_state(User.final_step)
    else:
        await bot.send_message(message.from_user.id,
                               '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–∏',
                               reply_markup=cancel_reg_kb)


async def register_driver(message: types.Message, state: FSMContext):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è """
    if message.content_type == 'text':
        user_data = await state.get_data()
        name = user_data.get('name')
        phone = user_data.get('phone')
        career = user_data.get('career')
        city = user_data.get('city')

        text = (f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n'
                f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {career}\n'
                f'–ü–æ–ª–Ω–æ–µ –∏–º—è: {name}\n'
                f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n'
                f'–ì–æ—Ä–æ–¥: {city}\n'
                f'–î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ: {user_data.get("car_info")}\n'
                f'–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get("sts")}\n'
                f'–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ: {user_data.get("license")}\n'
                f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–∂–µ: {message.text}')
        if message.from_user.username:
            text += f'–ü—Ä–æ—Ñ–∏–ª—å: @{message.from_user.username}'

        await bot.send_message(chat_id=os.getenv('CHANEL_ID'),
                               text=text)
        await bot.send_message(message.from_user.id,
                               text='‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...\nüë©‚Äçüíª –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É...',
                               reply_markup=cancel_reg_kb)
        await state.clear()
    else:
        await bot.send_message(message.from_user.id,
                               '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Å—Ç–∞–∂–µ',
                               reply_markup=cancel_reg_kb)


async def start_menu(message: types.Message, state: FSMContext):
    """ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
    await state.clear()
    await bot.send_message(message.from_user.id, text=start_command_text, reply_markup=register_kb)


def regisres_handlers(dp: Dispatcher):
    dp.message.register(start_menu, (F.text == '‚Ü© –ù–∞–∑–∞–¥') | (F.text == '/start'))
    dp.message.register(register_user, (F.text == 'üöñ –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º | –∫—É—Ä—å–µ—Ä–æ–º'))
    dp.message.register(select_city, User.start_quiz,
                        (F.text == 'üöï –í–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏') | (F.text == 'üöó –ê–≤—Ç–æ–∫—É—Ä—å–µ—Ä') | (F.text == 'üö∂ –ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä'), )
    dp.message.register(get_phone, User.get_city)
    dp.message.register(process_register, User.get_phone)
    dp.message.register(get_name, User.next_step)
    dp.message.register(get_car_info_and_reg_courier, User.get_car_info)
    dp.message.register(get_doc_info, User.get_doc_info)
    dp.message.register(get_license, User.get_license)
    dp.message.register(get_driver_info, User.get_driver_info)
    dp.message.register(register_driver, User.final_step)
