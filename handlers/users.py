from aiogram import types, Dispatcher, F
from aiogram.types import ReplyKeyboardRemove

from keyboard.inline import settings_kb, seat_settings_kb, payment_settings_kb, delivery_settings_kb, main_kb, \
    statistic_kb, cancel_kb
from loader import bot, base, data


async def register_user(message: types.Message):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π """
    if message.contact.phone_number:
        base.register_user(message.from_user.id, message.contact.phone_number)
        await bot.send_message(
            message.from_user.id,
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É üëâ /start',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω')


async def current_order(callback: types.CallbackQuery):
    """ –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ """
    await callback.message.edit_text('ü§∑‚Äç‚ôÄ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=cancel_kb())
    await callback.answer()


async def liderboard(callback: types.CallbackQuery):
    """ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ """
    liders: list = data.get_leaders()
    if liders:
        text = ''
        for i, lider in enumerate(liders[:3], start=1):
            fullname, orders = lider.split()[:2], lider.split()[-1]
            medal = 'ü•á' if i == 1 else 'ü•à' if i == 2 else 'ü•â'
            text += f'{medal} {" ".join(fullname)} - {orders} –∑–∞–∫–∞–∑–æ–≤\n'

        if len(liders) >= 4:
            for lider in liders[3:]:
                fullname, orders = lider.split()[:2], lider.split()[-1]
                text += f'üéó {" ".join(fullname)} - {orders} –∑–∞–∫–∞–∑–æ–≤\n'

        await callback.message.edit_text(text, reply_markup=cancel_kb())
    else:
        await callback.message.edit_text('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞',
                                         reply_markup=cancel_kb())
    await callback.answer()


async def driver_statistic(callback: types.CallbackQuery):
    """ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è """
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: üëá', reply_markup=statistic_kb())
    await callback.answer()


async def settings_user(callback: types.CallbackQuery):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: üëá', reply_markup=settings_kb())
    await callback.answer()


async def seat_settings(callback: types.CallbackQuery):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞ """
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá', reply_markup=seat_settings_kb())
    await callback.answer()


async def payment_settings(callback: types.CallbackQuery):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–ø–ª–∞—Ç—ã """
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá', reply_markup=payment_settings_kb())
    await callback.answer()


async def delivery_settings(callback: types.CallbackQuery):
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ """
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá', reply_markup=delivery_settings_kb())
    await callback.answer()


async def cancel_menu(callback: types.CallbackQuery):
    """ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é """
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', reply_markup=main_kb())
    await callback.answer()


def user_hanlers(dp: Dispatcher):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ """
    dp.message.register(register_user, F.contact)
    dp.callback_query.register(current_order, F.data == 'current_order')
    dp.callback_query.register(liderboard, F.data == 'leaderboard')
    dp.callback_query.register(driver_statistic, F.data == 'user_stat')
    dp.callback_query.register(settings_user, F.data == 'settings')
    dp.callback_query.register(seat_settings, F.data == 'seat')
    dp.callback_query.register(payment_settings, F.data == 'payment')
    dp.callback_query.register(delivery_settings, F.data == 'delivery')
    dp.callback_query.register(cancel_menu, F.data == 'cancel')
