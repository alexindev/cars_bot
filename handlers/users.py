from aiogram import types, Dispatcher, F
from aiogram.types import ReplyKeyboardRemove

from keyboard.inline import main_kb, cancel_kb
from keyboard.standart import register_kb
from loader import bot, data, base
from utils.helpers import get_leaderboard_text


async def authorization_user(message: types.Message):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∫–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    """
    phone = message.contact.phone_number
    if phone:
        if not phone.startswith('+'):
            phone = '+' + phone
        check_message = await bot.send_message(
            message.from_user.id,
            'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...',
            reply_markup=ReplyKeyboardRemove()
        )
        driver_id = data.get_driver_id_by_phone(phone)
        if driver_id:
            base.register_user(message.from_user.id, phone, driver_id)
            # –≤–æ–∑–º–æ–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await bot.delete_message(message.from_user.id, check_message.message_id)
            await bot.send_message(
                chat_id=message.from_user.id,
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=main_kb()
            )
        else:
            await bot.delete_message(message.from_user.id, check_message.message_id)
            await bot.send_message(
                chat_id=message.from_user.id,
                text='‚ùå –ù–æ–º–µ—Ä –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n'
                     '‚ö° –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ä–∫–µ –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –≤–æ–ª–∂—Å–∫–∏–π21.—Ä—Ñ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ https://t.me/',
                reply_markup=register_kb
            )
    else:
        await bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω')


async def current_order(callback: types.CallbackQuery):
    """ –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ """
    await callback.message.edit_text('ü§∑‚Äç‚ôÄ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=cancel_kb())
    await callback.answer()


async def liderboard(callback: types.CallbackQuery):
    """ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ """
    liders: list = data.get_leaders()
    if liders:
        text = get_leaderboard_text(liders)
        await callback.message.edit_text(text, reply_markup=cancel_kb())
    else:
        await callback.message.edit_text('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞',
                                         reply_markup=cancel_kb())
    await callback.answer()


async def cancel_menu(callback: types.CallbackQuery):
    """ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é """
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', reply_markup=main_kb())
    await callback.answer()


def user_hanlers(dp: Dispatcher):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ """
    dp.message.register(authorization_user, F.contact)
    dp.callback_query.register(current_order, F.data == 'current_order')
    dp.callback_query.register(liderboard, F.data == 'leaderboard')
    dp.callback_query.register(cancel_menu, F.data == 'cancel')
