from datetime import timedelta, datetime


def get_leaderboard_text(liders: list) -> str:
    """ –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ """
    text = ''
    for i, lider in enumerate(liders[:3], start=1):
        fullname, orders = lider.split()[:2], lider.split()[-1]
        medal = 'ü•á' if i == 1 else 'ü•à' if i == 2 else 'ü•â'
        text += f'{medal} {" ".join(fullname)} - {orders} –∑–∞–∫–∞–∑–æ–≤\n'

    if len(liders) >= 4:
        for lider in liders[3:]:
            fullname, orders = lider.split()[:2], lider.split()[-1]
            text += f'üéó {" ".join(fullname)} - {orders} –∑–∞–∫–∞–∑–æ–≤\n'
    return text


def get_statistic_text(stat: dict, cancelled: list) -> str:
    """ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
    orders = stat['orders'].get('count_completed')
    price = round(stat['orders'].get('price'), 1)
    km = stat['orders'].get('mileage')
    if km != 0:
        km = round(km / 1000, 1)

    cash = round(stat['balances'].get('cash_collected'), 1)
    card = round(stat['balances'].get('platform_card'), 1)
    corp_pay = round(stat['balances'].get('platform_corporate'), 1)
    tips = round(stat['balances'].get('platform_tip'), 1)
    promo = round(stat['balances'].get('platform_promotion'), 1)
    bonus = round(stat['balances'].get('platform_bonus'), 1)
    ya_fees = round(stat['balances'].get('platform_fees'), 1)
    park_fees = round(stat['balances'].get('partner_fees'), 1)
    total = round(stat['balances'].get('total'), 1)

    work_time = timedelta(seconds=stat['work_time'].get('seconds'))
    average_pay = round(stat['work_time'].get('mph'), 1)

    text = (f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders}\n'
            f'üßæ –°—É–º–º–∞ —Å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–∞: {price}\n'
            f'üìç –ü—Ä–æ–±–µ–≥: {km}\n\n'
            f'üí∏ –ù–∞–ª–∏—á–Ω—ã–º–∏: {cash}\n'
            f'üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ: {card}\n'
            f'üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {corp_pay}\n'
            f'ü§ë –ß–∞–µ–≤—ã–µ: {tips}\n'
            f'üíé –ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏: {promo}\n'
            f'üéÅ –ë–æ–Ω—É—Å: {bonus}\n\n'
            f'üôÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º: {cancelled.count("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º")}\n'
            f'üôÖ‚Äç‚ôÇ –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞: {cancelled.count("–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞")}\n'
            f'‚úà –°–∞–º–æ–ª–µ—Ç: {cancelled.count("–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è")}\n\n'
            f'üîª –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {ya_fees}\n'
            f'üîª –ö–æ–º–∏—Å—Å–∏—è –ø–∞—Ä–∫–∞: {park_fees}\n'
            f'üí∞ –ò–¢–û–ì–û: {total}\n\n'
            f'‚åö –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {work_time}\n'
            f'üí∏ –°—Ä–µ–¥–Ω–µ—á–∞—Å–æ–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {average_pay}')
    return text


def get_last_monday_sunday() -> tuple:
    """ –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –ø—Ä—ã–¥—ã–¥—É—à–∏—Ö –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ """
    today = datetime.today()
    last_monday = today - timedelta(days=today.weekday(), weeks=1)
    last_sunday = last_monday + timedelta(days=6)

    monday_2 = today - timedelta(days=today.weekday(), weeks=2)
    sunday_2 = monday_2 + timedelta(days=6)

    last_monday = last_monday.strftime('%Y-%m-%d')
    last_sunday = last_sunday.strftime('%Y-%m-%d')

    monday_2 = monday_2.strftime('%Y-%m-%d')
    sunday_2 = sunday_2.strftime('%Y-%m-%d')
    return last_monday, last_sunday, monday_2, sunday_2


def get_quality_text(data: dict) -> str:
    """ –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ """
    our_observation = data.get("our_observation")
    our_observation_text = ', '.join(our_observation) if our_observation else '-'

    main_contains = data.get("main_complaints")
    main_contains_str = ', '.join(main_contains) if main_contains else '-'

    date_from = data.get('date_from').split('-')
    date_to = data.get('date_to').split('-')

    text = (f'üìÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from[2]}/{date_from[1]} - {date_to[2]}/{date_to[1]}: \n\n'
            f'üëã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: {data.get("orders")}\n'
            f'‚úå –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: {data.get("trips")}\n'
            f'‚≠ê –ó–∞–∫–∞–∑—ã —Å –æ—Ü–µ–Ω–∫–æ–π 5 –∑–≤–µ–∑–¥: {data.get("perfect_trips")}\n'
            f'ü§¨ –ñ–∞–ª–æ–±—ã –Ω–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–æ–∫: {data.get("cancel_orders")}\n'
            f'‚ùó –ù–∞—Ä—É—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: {our_observation_text}\n'
            f'‚Äº –û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {main_contains_str}\n'
            f'üíî –ó–∞–∫–∞–∑—ã —Å –æ—Ü–µ–Ω–∫–æ–π 1-3 –∑–≤–µ–∑–¥—ã: {data.get("bad_rated_trips")}\n'
            f'üö© –†–µ–π—Ç–∏–Ω–≥ –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞: {data.get("rating_start")}\n'
            f'üèÅ –†–µ–π—Ç–∏–Ω–≥ –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞: {data.get("rating_end")}')
    return text


def get_state_text(data: dict) -> str:
    """ –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è """
    categories = {
        'econom': '–≠–∫–æ–Ω–æ–º',
        'courier': '–ö—É—Ä—å–µ—Ä',
        'intercity': '–ú–µ–∂–≥–æ—Ä–æ–¥',
        'express': '–î–æ—Å—Ç–∞–≤–∫–∞',
        'comfort': '–ö–æ–º—Ñ–æ—Ä—Ç',
        'comfort_plus': '–ö–æ–º—Ñ–æ—Ä—Ç+',
        'vip': 'VIP',
        'business': '–ë–∏–∑–Ω–µ—Å',
        'ultimate': 'Premier',
        'personal_driver': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å',
        'maybach': 'Elite',
        'premium_suv': '–ü–æ–º–æ—â—å –≤–∑—Ä–æ—Å–ª—ã–º'
    }
    categories_text = ', '.join([categories.get(i, '-') for i in data.get('categories', [])])

    amenities = {
        'child_seat': '–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ',
        'lightbox': 'LightBox',
        'sticker': '–ù–∞–∫–ª–µ–π–∫–∏',
        'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞'
    }
    amenities_text = ', '.join([amenities.get(i, '-') for i in data.get('amenities', [])])
    text = ('‚Ñπ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \n\n'
            f'üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data.get("brand")} {data.get("model")} {data.get("color")} {data.get("number")}\n'
            f'üìÖ –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {data.get("year")}\n'
            f'üî∞ VIN: {data.get("vin")}\n'
            f'‚ûï –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏: {amenities_text}\n'
            f'üîß –¢–∞—Ä–∏—Ñ—ã: {categories_text}')
    return text


def get_seat_text(seats: list) -> str:
    """ –¢–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—Å–∫–∏—Ö –∫—Ä–µ—Å–ª–∞—Ö """
    text = []
    for i in seats:
        if i[-1] == '0':
            text.append('0-9 –º–µ—Å—è—Ü–µ–≤')
        elif i[-1] == '1':
            text.append('–û—Ç 9 –º–µ—Å—è—Ü–µ–≤ –¥–æ 3 –ª–µ—Ç')
        elif i[-1] == '2':
            text.append('–û—Ç 3 –¥–æ 7 –ª–µ—Ç')
        else:
            text.append('–û—Ç 7 –¥–æ 12 –ª–µ—Ç')
    return f'üëÄ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫—Ä–µ—Å–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {", ".join(text)}'


def show_priority_drivers_text(data: tuple) -> str:
    """ –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π """
    text = 'üòé –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: \n\n'
    for i in data:
        text += f'{i[0].full_name}: {i[0].phone}\n'
    return text
